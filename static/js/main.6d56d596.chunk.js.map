{"version":3,"sources":["components/participant-image.js","components/participant_add/participant-add-image-list.js","components/participant_add/participant-add.js","components/participant_attributes/participant-attributes.js","components/participant_attributes/participant-attributes-add.js","components/participant_list/participant-card.js","components/participant_list/participant-list.js","components/roll-chance.js","components/participants-container.js","redux/actions.js","components/options/options-bg-buttons.js","components/options/options-bg.js","components/options/options-gameplay.js","components/options/options-rooms.js","components/options/options-container.js","constants.js","components/room-prompt.js","App.js","serviceWorker.js","redux/reducer.js","redux/participants.js","redux/active_participant.js","redux/bg.js","redux/bg_mask.js","redux/display_message.js","redux/utilize_initiative.js","redux/socket.js","redux/socketroom.js","index.js"],"names":["defaultImgURL","ParticipantImage","_ref","imageURL","isActive","participantName","floatLeft","_useState","useState","_useState2","Object","slicedToArray","isPortrait","setIsPortrait","_useState3","_useState4","imagePlacement","setImagePlacement","_useState5","_useState6","borderColor","setBorderColor","stringToColor","img","Image","onload","width","height","src","react_default","a","createElement","className","style","float","alt","top","concat","left","ParticipantImageList","setMainImageInput","isOpen","setIsOpen","imageInput","setImageInput","imagePage","setImagePage","useEffect","window","scroll","document","body","scrollHeight","behavior","handleSelectImage","image","toggleIsOpen","getImages","localStorage","images","JSON","parse","pageCap","Math","ceil","length","renderImage","key","onClick","participant_image","handlePaginate","event","target","id","Fragment","slice","map","renderImages","borderRadius","color","margin","onSubmit","preventDefault","includes","stringify","toConsumableArray","alert","type","value","onChange","placeholder","capitalize","string","toUpperCase","AddParticipants","props","_useSelector","useSelector","state","participants","activeParticipant","utilizeInitiative","setParticipants","setDisplayMessage","imageListIsOpen","setImageListIsOpen","setAddPartOpen","nameInput","setNameInput","initiativeInput","setInitiativeInput","handleInput","name","cursor","participant_add_image_list","filter","p","chances","parseInt","initiative","max","min","ParticipantAttributes","attributes","removeAttribute","i","ParticipantAttrsAdd","participantAttributes","handleAttributeAdd","attrs","attrButton","attr","ParticipantCard","attributesAddIsOpen","setAttributesAddIsOpen","participant","changeParticipantAttributes","removeParticipant","setChances","changeParticipantDelayed","changeInitiative","newInitiative","prompt","renderChances","delayed","participant_attributes","attribute","participant_attributes_add","ParticipantList","addPartOpen","setImage","renderParticipantCard","participant_card","renderParticipantImage","random","animation","sort","b","compareAlphabetical","RollChance","resetRound","setActiveParticipant","nextChance","availableParticipants","part","apply","getActiveParticipant","ParticipantsContainer","displayMessage","newChances","objectSpread","participant_list","item","newAttributes","isDelayed","roll_chance","pChances","participant_add","SET_PARTICIPANTS","SET_ACTIVE_PARTICIPANT","SET_BG","SET_BG_MASK","SET_DISPLAY_MESSAGE","SET_UTILIZE_INITIATIVE","SET_SOCKET","SET_SOCKETROOM_NAME","SET_SOCKETROOM_PASSWORD","SET_SOCKETROOM","CLEAR_SOCKETROOM","payload","setBG","setBGMask","setUtilizeInitiative","setSocket","setSocketRoom","clearSocketRoom","OptionsBGButtons","handleSubmit","bgImages","json","keys","data-image","data-id","renderLocalImgButtons","OptionsBG","setOptionsMessage","bgMask","dispatch","useDispatch","newBG","actions","newBGMask","bgNameInput","setBGNameInput","bgImageInput","setBGImageInput","intensity","console","warning","addImageToLocalStorage","classList","contains","innerText","dataset","removeImageFromLocalStorage","newImage","defineProperty","handleToggleOpen","options_bg_buttons","defaultValue","OptionsGameplay","border","socketRoom","roomInput","setRoomInput","passwordInput","setPasswordInput","handleChange","password","fontSize","fontFamily","marginRight","textAlign","OptionsContainer","socketChangeBG","bg","optionsOpen","setOptionsOpen","optionsMessage","zIndex","options_bg","options_gameplay","options_rooms","defaultBGImage","reconnectionDelay","reconnectionAttempts","endpoint","debugLog","message","process","RoomPrompt","isLongConnection","setIsLongConnection","timeout","setTimeout","clearTimeout","cDot","delay","animationDelay","App","socket","reconnectAttempt","attempts","connectSocket","newSocket","socketIO","emit","room","on","response","mask","data","title","disconnect","activeCard","getElementsByClassName","scrollIntoView","block","background","opacity","backgroundImage","connected","participants_container","newParticipants","newActiveParticipant","newMessage","room_prompt","options_container","newBGImage","newInitiativeUse","Boolean","location","hostname","match","combineReducers","arguments","undefined","action","store","createStore","reducer","ReactDOM","render","es","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6d56d596.chunk.js","sourcesContent":["// React\nimport React, { useState } from \"react\";\n// Toolbox\nimport { stringToColor } from \"brews-toolboxjs\";\n// Default Image\nconst defaultImgURL =\n  \"https://dungeonsdragonsblog.files.wordpress.com/2015/10/winterguard-silhouette-new.jpg\";\n\n//*------Component------*//\nconst ParticipantImage = ({ imageURL, isActive, participantName, floatLeft }) => {\n  //\n\n  //*------State------*//\n  const [isPortrait, setIsPortrait] = useState(true);\n  const [imagePlacement, setImagePlacement] = useState(0);\n  const [borderColor, setBorderColor] = useState(null);\n\n  // Set border color upon load\n  if (!borderColor) {\n    setBorderColor(stringToColor(participantName));\n  }\n\n  //*------Utilities------*//\n\n  // Set the image placement and decide whether it's portrait or not\n  const img = new Image();\n\n  img.onload = () => {\n    if (img && img.width < img.height) {\n      setImagePlacement((img.height / img.width - 1) * 50);\n      if (!isPortrait) {\n        setIsPortrait(true);\n      }\n    } else if (img && img.height < img.width) {\n      setImagePlacement((img.width / img.height - 1) * 50);\n      if (isPortrait) {\n        setIsPortrait(false);\n      }\n    }\n  };\n\n  imageURL ?  img.src = imageURL : img.src = defaultImgURL\n\n  //*------Render------*//\n\n  return (\n      <div className='participant-image-container' style={floatLeft ? {float: 'left'} : null}>\n\n        {/* Inner image */}\n        <img\n          className=\"participant-image\"\n          alt=\"\"\n          src={imageURL ? imageURL : defaultImgURL}\n          style={\n            isPortrait\n            ? { width: \"100px\", top: `-${imagePlacement}px` }\n            : { height: \"100px\", left: `-${imagePlacement}px` }\n          }\n          />\n\n        {/* Circular image frame */}\n        <div className={\n            isActive\n              ? \"participant-image-frame rotating\"\n              : \"participant-image-frame\"\n          }\n          style={{ borderColor }}\n        />\n\n      </div>\n  );\n};\n\nexport default ParticipantImage;\n","// React\nimport React, { useState, useEffect } from \"react\";\n// Components\nimport ParticipantImage from \"../participant-image\";\n\n/*------Component------*/\nconst ParticipantImageList = ({ setMainImageInput, isOpen, setIsOpen }) => {\n\n  /*------State------*/\n  const [imageInput, setImageInput] = useState(\"\");\n  const [imagePage, setImagePage] = useState(0);\n\n  /*------Effects------*/\n\n  useEffect(() => {\n    window.scroll({left: 0, top: document.body.scrollHeight, behavior: 'smooth'});\n  })\n\n  /*------Setters------*/\n\n  const handleSelectImage = image => {\n    setMainImageInput(image);\n    setIsOpen(!isOpen);\n  };\n\n  const handleInput = event => {\n    setImageInput(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const img = new Image();\n    img.onload = () => {\n      if (img.width && !getImages().includes(imageInput)) {\n        localStorage.images = JSON.stringify([...getImages(), imageInput]);\n        handleSelectImage(imageInput)\n        setImageInput(\"\");\n      } else if (getImages().includes(imageInput)) {\n        alert('Image already exists')\n      }\n    }\n\n    img.src = imageInput\n  };\n\n  const toggleIsOpen = () => {\n    setIsOpen(!isOpen);\n  };\n\n  /*------Utilities------*/\n\n  // Returns a parsed array of all saved images\n  const getImages = () => {\n    if (localStorage.images) {\n      return JSON.parse(localStorage.images);\n    } else {\n      return [];\n    }\n  };\n\n  // Determines how many pages there can be dependant on number of saved images\n  const pageCap = () => Math.ceil(getImages().length / 12);\n\n  // Renders a single image\n  const renderImage = image => {\n    return (\n      <div\n        key={image}\n        onClick={() => handleSelectImage(image)}\n        className=\"add-image-div\"\n      >\n        <ParticipantImage\n          imageURL={image}\n          isActive={false}\n          participantName=\"\"\n        />\n      </div>\n    );\n  };\n\n  // Renders each image in an array\n  const renderImages = () => {\n    if (localStorage.images) {\n      return getImages()\n        .slice(imagePage * 12, (imagePage + 1) * 12)\n        .map(renderImage);\n    }\n  };\n\n  // Handles movement through different pages of images\n  const handlePaginate = event => {\n    if (event.target.id === \"page-previous\" && imagePage > 0) {\n      setImagePage(imagePage - 1);\n    } else if (\n      (event.target.id === \"page-next\" || event.target.id === \"page-next-2\") &&\n      pageCap() > imagePage + 1\n    ) {\n      setImagePage(imagePage + 1);\n    }\n  };\n\n  /*------Render------*/\n\n  if (isOpen) {\n    return (\n      <>\n        {/* Background mask to close container */}\n        <div\n          id=\"close-add-images-container\"\n          className=\"fillscreen\"\n          onClick={toggleIsOpen}\n        />\n        {/* Add image button */}\n        {!isOpen ? <button onClick={toggleIsOpen}>Add Image</button> : null}\n        {/* Images container */}\n        <div id=\"add-images-container\">{renderImages()}</div>\n        <div id=\"add-images-pagination-buttons\">\n          <div/>\n          {/* Previous Page */}\n          <button\n            id=\"page-previous\"\n            className={imagePage > 0 ? null : \"inactive-button\"}\n            onClick={handlePaginate}\n            style={{borderRadius: '0 0 0 10px'}}\n          >\n            Previous\n          </button>\n          {/* Page number display */}\n          <span style={{width: '7em', color: 'white', margin: 'auto'}}>{`Page ${imagePage + 1}`}</span>\n          {/* Next Page */}\n          <button\n            id=\"page-next\"\n            onClick={handlePaginate}\n            className={pageCap() > imagePage + 1 ? null : \"inactive-button\"}\n            style={{borderRadius: '0 0 10px 0'}}\n          >\n            Next\n          </button>\n        </div>\n        <br />\n        {/* Add new image form */}\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            value={imageInput}\n            onChange={handleInput}\n            placeholder=\"add new image url\"\n          />\n          <input type=\"submit\" value=\"save\" />\n        </form>\n      </>\n    );\n  } else {\n    return <div />;\n  }\n};\n\nexport default ParticipantImageList;\n","// React\nimport React, { useState } from \"react\";\n//Redux\nimport {useSelector} from 'react-redux'\n// Components\nimport ParticipantImageList from \"./participant-add-image-list\";\nimport ParticipantImage from \"../participant-image\";\n// CSS\nimport './style.css'\n\nconst capitalize = string => {\n  if (string[0]) {\n    return string[0].toUpperCase() + string.slice(1);\n  } else {\n    return \"\";\n  }\n};\n\n/*------component------*/\nconst AddParticipants = props => {\n\n  /*------Redux------*/\n\n  const {participants, activeParticipant, utilizeInitiative} = useSelector(state => state)\n\n  /*------Props------*/\n\n  const {\n    setParticipants,\n    setDisplayMessage,\n    imageListIsOpen,\n    setImageListIsOpen,\n    setAddPartOpen\n  } = props;\n\n  /*------State------*/\n\n  const [nameInput, setNameInput] = useState(\"\");\n  const [imageInput, setImageInput] = useState(\n    \"https://dungeonsdragonsblog.files.wordpress.com/2015/10/winterguard-silhouette-new.jpg\"\n  );\n  const [initiativeInput, setInitiativeInput] = useState(10)\n\n  /*------Setters------*/\n\n  const handleInput = event => {\n    switch (event.target.name) {\n      case 'name-input':\n        setNameInput(capitalize(event.target.value));\n        break;\n      case 'initiative-input':\n        setInitiativeInput(capitalize(event.target.value));\n        break;\n      default:\n\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!participants.filter(p => p.name === nameInput).length) {\n\n      // Chances depends on whether there is an active participant and whether they come before or after in initiative\n      const chances = activeParticipant && parseInt(initiativeInput) < activeParticipant.initiative ? 1 : !activeParticipant ? 1 : 0\n\n      if (nameInput.length) {\n        setParticipants([\n          ...participants,\n          { name: nameInput, chances, image: imageInput, initiative: parseInt(initiativeInput) }\n        ]);\n        setDisplayMessage(`${nameInput} is ready!`);\n        setNameInput(\"\");\n        setImageInput(\"\");\n      }\n\n    } else {\n      alert(`A character already exists with that name!`)\n    }\n  };\n\n  const toggleIsOpen = () => {\n    setAddPartOpen(false)\n  }\n\n  /*------Render------*/\n\n  return (\n    <div id=\"participant-add-container\">\n      <div\n        id=\"close-add-participants-container\"\n        className=\"fillscreen\"\n        onClick={toggleIsOpen}\n      />\n      {!imageListIsOpen ? (\n        <div\n          style={{ cursor: \"pointer\" }}\n          onClick={() => setImageListIsOpen(!imageListIsOpen)}\n        >\n          <ParticipantImage\n            imageURL={imageInput}\n            isActive={true}\n            participantName={nameInput}\n          />\n        </div>\n      ) : null}\n      <ParticipantImageList\n        setMainImageInput={setImageInput}\n        isOpen={imageListIsOpen}\n        setIsOpen={setImageListIsOpen}\n      />\n      <form\n        onSubmit={handleSubmit}\n        className={imageListIsOpen ? \"display-none\" : null}\n      >\n        <input\n          id=\"name-input\"\n          type=\"text\"\n          name=\"name-input\"\n          value={nameInput}\n          onChange={handleInput}\n          placeholder=\"name\"\n        />\n        {utilizeInitiative ?\n          <input\n          id=\"initiative-input\"\n          type=\"number\"\n          name=\"initiative-input\"\n          value={initiativeInput}\n          onChange={handleInput}\n          style={{width: '3em'}}\n          max='40'\n          min='0'\n          />\n        : null}\n        <input type=\"submit\" value=\"Add\" />\n      </form>\n    </div>\n  );\n};\n\nexport default AddParticipants;\n","// React\nimport React from \"react\";\n// Style\nimport './style.css'\n\n/*------Component------*/\nconst ParticipantAttributes = ({ attributes, removeAttribute }) => {\n  /*------Render------*/\n  return attributes.map((a, i) => (\n    <button\n      className=\"attribute-button\"\n      key={i}\n      name={a}\n      onClick={() => removeAttribute(a)}\n    >\n      {a}&#xFE0E;\n    </button>\n  ));\n};\n\nexport default ParticipantAttributes;\n","// React\nimport React from \"react\";\n// Style\nimport './style.css'\n\n/*------Component------*/\nconst ParticipantAttrsAdd = ({ participantAttributes, handleAttributeAdd, isOpen, setIsOpen }) => {\n\n\n  /*------Utilities------*/\n\n  const toggleIsOpen = () => {\n    setIsOpen(!isOpen);\n  };\n\n  // The various attributes that will become buttons\n  const attrs = [\"Ω\",\"Χ\",\"⇪\",\"⋙\",\"⇓\",\"⊗\",\"≈\",\"☁\",\"☘\",\"☠\",\"☢\",\"☣\",\"♥\",\"♦\",\"♣\",\"♠\",\"♨\",\"♫\",\"⚡\",\"⚠\"];\n\n  // Renders an attribute button\n  const attrButton = attr => {\n    return (\n      <button\n        className=\"attribute-button\"\n        key={attr}\n        onClick={() => {\n          setIsOpen(!isOpen);\n          handleAttributeAdd(attr);\n        }}\n      >\n        {attr}&#xFE0E;\n      </button>\n    );\n  };\n\n  // Renders a list of attribute buttons\n  const renderAttrButtons = () => {\n    if (participantAttributes) {\n      return attrs\n        .filter(a => !participantAttributes.includes(a))\n        .map((attr, i) => attrButton(attr));\n    } else {\n      return attrs.map((attr, i) => attrButton(attr));\n    }\n  };\n\n  /*------Render------*/\n\n  return (\n    <div className=\"attr-add\">\n      {isOpen ? (\n        <>\n          <div className='fillscreen' onClick={toggleIsOpen}/>\n          <div className='attr-add-buttons-container'>\n            {renderAttrButtons()}\n          </div>\n        </>\n      )\n      : null}\n    </div>\n  );\n};\n\nexport default ParticipantAttrsAdd;\n","// React\nimport React, {useState} from \"react\";\n// Redux\nimport {useSelector} from 'react-redux'\n// Components\nimport ParticipantAttributes from \"../participant_attributes/participant-attributes\";\nimport ParticipantAttrsAdd from \"../participant_attributes/participant-attributes-add\";\nimport ParticipantImage from \"../participant-image\";\n// Images\nconst defaultImage =\n  \"https://dungeonsdragonsblog.files.wordpress.com/2015/10/winterguard-silhouette-new.jpg\";\n\n/*------Component------*/\nconst ParticipantCard = props => {\n\n  /*------Redux------*/\n\n  const activeParticipant = useSelector(state => state.activeParticipant)\n  const utilizeInitiative = useSelector(state => state.utilizeInitiative)\n\n  /*------ State ------*/\n\n  const [attributesAddIsOpen, setAttributesAddIsOpen] = useState(false)\n\n  /*------Props------*/\n  const {\n    participant,\n    changeParticipantAttributes,\n    removeParticipant,\n    setChances,\n    changeParticipantDelayed,\n    changeInitiative\n  } = props;\n\n  //*------Utilities------*//\n\n  // Adds attribute to participant\n  const handleAttributeAdd = attr => {\n    participant.attributes\n      ? changeParticipantAttributes(participant, [\n          ...participant.attributes,\n          attr\n        ])\n      : changeParticipantAttributes(participant, [attr]);\n  };\n\n  const handleClickInitiative = () => {\n    const newInitiative = prompt('New Initiative:', participant.initiative)\n    if (parseInt(newInitiative) && parseInt(newInitiative) >= 0 && parseInt(newInitiative) <= 40) {\n      changeInitiative(participant, newInitiative)\n    } else if (newInitiative) {\n      alert(`[${newInitiative}] is invalid`)\n    }\n  }\n\n  // Removes attribute from participant\n  const removeAttribute = attribute => {\n    changeParticipantAttributes(\n      participant,\n      participant.attributes.filter(a => a !== attribute)\n    );\n  };\n\n  // Determines whether a participant uses the active border or not\n  const isActiveCard = () => {\n    if (activeParticipant && activeParticipant.name === participant.name) {\n      return \"participant-card participant-card-active\"\n    } else if (participant.chances <= 0) {\n      return \"participant-card participant-card-exhausted\"\n    } else {\n      return \"participant-card\"\n    }\n  }\n\n  // Sets the participant to delayed\n  const delayParticipant = () => {\n    changeParticipantDelayed(participant, true);\n  };\n\n  const renderChances = (string,i) => {\n    return i > participant.chances ? string : string + \"⚔\" + renderChances(string, i + 1)\n  }\n\n  //*------Render------*//\n  return (\n    <div className={isActiveCard()}>\n      <ParticipantImage\n        imageURL={participant.image ? participant.image : defaultImage}\n        isActive={activeParticipant && activeParticipant.name === participant.name}\n        participantName={participant.name}\n        floatLeft={true}\n      />\n\n      {utilizeInitiative ?\n        <p className='participant-card-initiative' onClick={handleClickInitiative}>{participant.initiative}</p>\n        : participant.chances ?\n        <p className='participant-card-initiative'>{renderChances('', 1)}</p>\n        : null }\n\n      <p style={{margin: '0.7em'}}>\n        {participant.name}\n      </p>\n\n      <div className=\"participant-card-buttons\">\n        {!utilizeInitiative ?\n          <button onClick={() => setChances(participant, participant.chances + 1)}>Add Chance</button>\n          : <div/>}\n        {!utilizeInitiative && !participant.delayed && participant.chances ? (\n          <button onClick={delayParticipant}>Delay</button>\n        ) : (\n          <div />\n        )}\n        <button onClick={() => setAttributesAddIsOpen(!attributesAddIsOpen)}>Tags</button>\n        <button onClick={() => removeParticipant(participant)}>Remove</button>\n      </div>\n\n      <br />\n\n      {participant.attributes ? (\n        <div className='participant-attributes-container'>\n          <ParticipantAttributes\n            attributes={participant.attributes}\n            removeAttribute={removeAttribute}\n            />\n        </div>\n      ) : null}\n\n      <ParticipantAttrsAdd\n        participantAttributes={participant.attributes}\n        handleAttributeAdd={handleAttributeAdd}\n        isOpen={attributesAddIsOpen}\n        setIsOpen={setAttributesAddIsOpen}\n      />\n\n    </div>\n  );\n};\n\nexport default ParticipantCard;\n","// React\nimport React from \"react\";\n//Redux\nimport {useSelector} from 'react-redux'\n// Components\nimport ParticipantCard from \"./participant-card\";\nimport ParticipantImage from \"../participant-image\";\n// Toolbox\nimport { compareAlphabetical } from \"brews-toolboxjs\";\n// CSS\nimport \"./style.css\"\n// Images\nconst defaultImage =\n  \"https://dungeonsdragonsblog.files.wordpress.com/2015/10/winterguard-silhouette-new.jpg\";\n\n/*------Component------*/\nconst ParticipantList = props => {\n\n  /*------Redux------*/\n\n  const {participants, activeParticipant} = useSelector(state => state)\n\n  /*------Props------*/\n  const {\n    removeParticipant,\n    setChances,\n    changeParticipantAttributes,\n    changeParticipantDelayed,\n    addPartOpen,\n    changeInitiative\n  } = props;\n\n  /*------Utilities------*/\n\n  // Checks to see whether it's the participant's turn\n  const isActive = participant =>\n    activeParticipant ? participant.name === activeParticipant.name : false;\n\n  // Checks to see if a participant has an image and sets a default one if none exists\n  const setImage = participant =>\n    participant.image ? participant.image : defaultImage;\n\n  // Renders a single card\n  const renderParticipantCard = participant => (\n\n    <ParticipantCard\n      {...{\n        key: participant.name,\n        participant,\n        removeParticipant,\n        setChances,\n        changeParticipantAttributes,\n        changeParticipantDelayed,\n        changeInitiative\n      }}\n    />\n\n  );\n\n  // Renders a single image\n  const renderParticipantImage = participant => (\n    <div\n      key={Math.random() * 100}\n      style={{\n        animation: \"participant-card-appear 0.5s\",\n        margin: \"5px\"\n      }}\n    >\n      <ParticipantImage\n        {...{\n          imageURL: setImage(participant),\n          isActive: isActive(participant),\n          participantName: participant.name\n        }}\n      />\n    </div>\n  );\n\n  // Renders all participants in either full or image format depending on whether AddParticipant is open\n  const renderParticipantList = () => {\n    return [...participants]\n      .sort((a, b) => {\n        if (a.initiative === b.initiative) return compareAlphabetical(a.name, b.name)\n        return b.initiative - a.initiative\n      })\n      .map(!addPartOpen ? renderParticipantCard : renderParticipantImage);\n  };\n\n  const listClass = () => {\n    return !addPartOpen ? \"participant-list\" : \"participant-list-reduced\";\n  };\n\n  //*------Render------*//\n  return <div id={listClass()}>{renderParticipantList()}</div>;\n};\n\nexport default ParticipantList;\n","// React\nimport React from \"react\";\n// Redux\nimport {useSelector} from 'react-redux'\n// Toolbox\nimport { random } from \"brews-toolboxjs\";\n\n/*------Component------*/\nconst RollChance = props => {\n\n  /*------Redux------*/\n\n  const participants = useSelector(state => state.participants)\n  const utilizeInitiative = useSelector(state => state.utilizeInitiative)\n\n  /*------Props------*/\n  const {\n    setChances,\n    resetRound,\n    setDisplayMessage,\n    setActiveParticipant,\n    addPartOpen\n  } = props;\n\n  /*------Utilities------*/\n\n  const getActiveParticipant = availableParticipants => {\n    if (utilizeInitiative) {\n      return random(availableParticipants.filter(part => part.initiative === Math.max(...availableParticipants.map(p => p.initiative))))\n    } else {\n      return random(availableParticipants)\n    }\n  }\n\n  const nextChance = availableParticipants => {\n    const activeParticipant = getActiveParticipant(availableParticipants)\n    setDisplayMessage(`${activeParticipant.name}'s turn to act!`);\n    setChances(activeParticipant, activeParticipant.chances - 1);\n    setActiveParticipant(activeParticipant);\n    // document.title = `${activeParticipant.name}'s Turn`;\n  };\n\n  const startNewRound = () => {\n    setDisplayMessage(\"Starting a new round...\");\n    resetRound();\n    setActiveParticipant(null);\n    // document.title = `New Round`;\n  };\n\n  const rollForChance = () => {\n    const availableParticipants = participants.filter(p => p.chances > 0);\n    if (availableParticipants.length) {\n      nextChance(availableParticipants);\n    } else if (participants.length) {\n      startNewRound();\n    } else {\n      setDisplayMessage(\"Add participants to start a new round!\");\n      // document.title = `Action Chance`;\n    }\n  };\n\n  /*------Render------*/\n\n  return (\n    <button\n      onClick={rollForChance}\n      className={\n        addPartOpen || participants.length === 0 ? \"display-hidden\" : null\n      }\n    >\n      Next\n    </button>\n  );\n};\n\nexport default RollChance;\n","// React\nimport React, { useState } from \"react\";\n// Components\nimport AddParticipant from \"./participant_add/participant-add\";\nimport ParticipantList from \"./participant_list/participant-list\";\nimport RollChance from \"./roll-chance\";\n// Redux\nimport {useSelector} from 'react-redux'\n\n/*------Component------*/\nconst ParticipantsContainer = ({setParticipants, setActiveParticipant, displayMessage, setDisplayMessage}) => {\n\n  /*------Redux------*/\n  const participants = useSelector(state => state.participants)\n\n  /*------State------*/\n  const [addPartOpen, setAddPartOpen] = useState(false);\n  const [imageListIsOpen, setImageListIsOpen] = useState(false);\n\n  /*------Setters------*/\n\n  // Removes participant from participants\n  const removeParticipant = participant => {\n    setParticipants(\n      [...participants].filter(item => item !== participant)\n    );\n  };\n\n  // Resets the round and resets certain participant statuses\n  const resetRound = () => {\n    setParticipants(\n      [...participants].map(p => {\n        const pChances = p.delayed ? 2 : 1;\n        return { ...p, chances: pChances, delayed: false };\n      })\n    );\n    setActiveParticipant(null);\n  };\n\n  // Removes all participants\n  const reset = () => {\n    setParticipants([]);\n    setDisplayMessage(\"|||\");\n    setActiveParticipant(null);\n  };\n\n  // Sets a single participant's chances\n  const setChances = (participant, newChances) => {\n    setParticipants([\n      ...participants.filter(p => p !== participant),\n      { ...participant, chances: newChances }\n    ]);\n  };\n\n  const changeInitiative = (participant, newInitiative) => {\n    setParticipants([\n      ...participants.filter(p => p !== participant),\n      { ...participant, initiative: parseInt(newInitiative)}\n    ])\n  }\n\n  // Sets a participant's attributes\n  const changeParticipantAttributes = (participant, newAttributes) => {\n    setParticipants([\n      ...participants.filter(p => p !== participant),\n      { ...participant, attributes: newAttributes }\n    ]);\n  };\n\n  // Gives participant the delayed status\n  const changeParticipantDelayed = (participant, isDelayed) => {\n    setParticipants([\n      ...participants.filter(p => p !== participant),\n      { ...participant, delayed: isDelayed, chances: participant.chances - 1 }\n    ]);\n  };\n\n  // Either closes the add participant image, closes the add participant window,\n  // or opens the add participant window depending on state\n  const setAddPartAndImageOpen = () => {\n    imageListIsOpen ?\n    setImageListIsOpen(!imageListIsOpen) :\n    setAddPartOpen(!addPartOpen)\n  }\n\n  /*------Render------*/\n\n  return (\n    <div id=\"participant-container\">\n      <h3 id=\"display-message\">{displayMessage}</h3>\n      <ParticipantList\n        {...{\n          setChances,\n          removeParticipant,\n          changeParticipantAttributes,\n          changeParticipantDelayed,\n          addPartOpen,\n          changeInitiative\n        }}\n      />\n\n      {!imageListIsOpen ? (\n        <div id='roll-chance-container'>\n          <RollChance {...{\n              setChances,\n              resetRound,\n              setDisplayMessage,\n              setActiveParticipant,\n              addPartOpen\n            }}\n          />\n          <button\n            onClick={reset}\n            className={\n              addPartOpen || participants.length === 0 ? \"display-none\" : null\n            }\n          >\n            Reset\n          </button>\n        </div>\n      ) : null}\n      {addPartOpen ? (\n        <AddParticipant\n        imageListIsOpen={imageListIsOpen}\n        setImageListIsOpen={setImageListIsOpen}\n        setParticipants={setParticipants}\n        setDisplayMessage={setDisplayMessage}\n        setAddPartOpen={setAddPartOpen}\n        />\n      ) : null}\n      <button\n        id=\"add-participant-button\"\n        className=\"parentheses-border\"\n        onClick={setAddPartAndImageOpen}\n      >\n        {!addPartOpen ? \"Add a participant\" : \"Back\"}\n      </button>\n    </div>\n  );\n};\n\nexport default ParticipantsContainer;\n","export const SET_PARTICIPANTS = 'SET_PARTICIPANTS'\nexport const SET_ACTIVE_PARTICIPANT = 'SET_ACTIVE_PARTICIPANT'\nexport const SET_BG = 'SET_BG'\nexport const SET_BG_MASK = 'SET_BG_MASK'\nexport const SET_DISPLAY_MESSAGE = 'SET_DISPLAY_MESSAGE'\nexport const SET_UTILIZE_INITIATIVE = 'SET_UTILIZE_INITIATIVE'\nexport const SET_SOCKET = 'SET_SOCKET'\nexport const SET_SOCKETROOM_NAME = 'SET_SOCKETROOM_NAME'\nexport const SET_SOCKETROOM_PASSWORD = 'SET_SOCKETROOM_PASSWORD'\nexport const SET_SOCKETROOM = 'SET_SOCKETROOM'\nexport const CLEAR_SOCKETROOM = 'CLEAR_SOCKETROOM'\n\nexport function setParticipants(payload) {\n  return {type: SET_PARTICIPANTS, payload}\n}\n\nexport function setActiveParticipant(payload) {\n  return {type: SET_ACTIVE_PARTICIPANT, payload}\n}\n\nexport function setBG(payload) {\n  return {type: SET_BG, payload}\n}\n\nexport function setBGMask(payload) {\n  return {type: SET_BG_MASK, payload}\n}\n\nexport function setDisplayMessage(payload) {\n  return {type: SET_DISPLAY_MESSAGE, payload}\n}\n\nexport function setUtilizeInitiative(payload) {\n  return {type: SET_UTILIZE_INITIATIVE, payload}\n}\n\nexport function setSocket(payload) {\n  return {type: SET_SOCKET, payload}\n}\n\nexport function setSocketRoomName(payload) {\n  return {type: SET_SOCKETROOM_NAME, payload}\n}\n\nexport function setSocketRoomPassword(payload) {\n  return {type: SET_SOCKETROOM_PASSWORD, payload}\n}\n\nexport function setSocketRoom(payload) {\n  return {type: SET_SOCKETROOM, payload}\n}\n\nexport function clearSocketRoom() {\n  return {type: CLEAR_SOCKETROOM}\n}\n","// React\nimport React from \"react\";\n\n/*------Component------*/\nconst OptionsBGButtons = ({ handleSubmit }) => {\n  /*------Utilities------*/\n  const renderLocalImgButtons = () => {\n    const json = JSON.parse(localStorage.bgImages);\n    return Object.keys(json).map(item => {\n      return (\n        <>\n          <button\n            key={item}\n            className=\"saved-bg-button\"\n            data-image={json[item]}\n            onClick={handleSubmit}\n          >\n            {item}\n          </button>\n          <button\n            key={`${item}-remove`}\n            className=\"saved-bg-button-remove\"\n            data-id={item}\n            onClick={handleSubmit}\n          >\n            X\n          </button>\n        </>\n      );\n    });\n  };\n\n  /*------Render------*/\n\n  if (localStorage.bgImages) {\n    return (\n      <>\n        <label>Saved Backgrounds:</label>\n        <br />\n        <div id=\"saved-bg-button-container\">{renderLocalImgButtons()}</div>\n      </>\n    );\n  } else {\n    return <div />;\n  }\n};\n\nexport default OptionsBGButtons;\n","// React\nimport React, { useState } from \"react\";\n// Redux\nimport {useSelector, useDispatch} from 'react-redux'\nimport * as actions from '../../redux/actions'\n// Components\nimport OptionsBGButtons from \"./options-bg-buttons\";\n\n/*------Component------*/\nconst OptionsBG = ({ setOptionsMessage }) => {\n\n  /*------Redux------*/\n\n  const bgMask = useSelector(state => state.bgMask)\n  const dispatch = useDispatch()\n  const setBG = newBG => dispatch(actions.setBG(newBG))\n  const setBGMask = newBGMask => dispatch(actions.setBGMask(newBGMask))\n\n  /*------State------*/\n\n  const [bgNameInput, setBGNameInput] = useState(\"\");\n  const [bgImageInput, setBGImageInput] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n\n  /*------Setters------*/\n  const handleInput = event => {\n    setOptionsMessage(\"\");\n    switch (event.target.id) {\n      case \"bg-image-input\":\n        setBGImageInput(event.target.value);\n        break;\n      case \"bg-name-input\":\n        setBGNameInput(event.target.value);\n        break;\n      case \"bg-color-input\":\n        setBGMask({ color: event.target.value, intensity: bgMask.intensity });\n        break;\n      case \"bg-intensity-input\":\n        setBGMask({ color: bgMask.color, intensity: event.target.value });\n        break;\n      default:\n        console.warning(\"Improper handle input\");\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (event.target.id === \"options-bg-image\") {\n      setBG(bgImageInput);\n      setOptionsMessage(`Added ${bgNameInput} to backgrounds`);\n      addImageToLocalStorage({ name: [bgNameInput], image: bgImageInput });\n      setBGImageInput(\"\");\n      setBGNameInput(\"\");\n    } else if (event.target.classList.contains(\"saved-bg-button\")) {\n      setOptionsMessage(`Changed background to ${event.target.innerText}`);\n      setBG(event.target.dataset.image);\n    } else if (event.target.classList.contains(\"saved-bg-button-remove\")) {\n      removeImageFromLocalStorage(event.target.dataset.id);\n    }\n  };\n\n  const removeImageFromLocalStorage = id => {\n    const images = JSON.parse(localStorage.bgImages);\n    delete images[id];\n    localStorage.bgImages = JSON.stringify(images);\n    setOptionsMessage(`Deleted ${id}`);\n  };\n\n  const addImageToLocalStorage = newImage => {\n    if (localStorage.bgImages) {\n      localStorage.bgImages = JSON.stringify({\n        ...JSON.parse(localStorage.bgImages),\n        [newImage.name]: newImage.image\n      });\n    } else {\n      localStorage.bgImages = JSON.stringify({\n        [newImage.name]: newImage.image\n      });\n    }\n  };\n\n  const handleToggleOpen = () => {\n    setIsOpen(!isOpen);\n  };\n\n  /*------Render------*/\n\n  if (isOpen) {\n    return (\n      <>\n        <button onClick={handleToggleOpen} id=\"options-button\">\n          Change Background ▲\n        </button>\n        <div id=\"options-bg\">\n          {/* Use local background image */}\n          <OptionsBGButtons handleSubmit={handleSubmit} />\n          {/* Add background image */}\n          <form id=\"options-bg-image\" onSubmit={handleSubmit}>\n            <label>Add a new background</label>\n            <br />\n            <label>Name</label>\n            <input\n              id=\"bg-name-input\"\n              value={bgNameInput}\n              onChange={handleInput}\n            />\n            <br />\n            <label>URL</label>\n            <input\n              id=\"bg-image-input\"\n              value={bgImageInput}\n              onChange={handleInput}\n            />\n            <br />\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n          <label>Add a background filter</label>\n          <br />\n          {/* Change background color intensity */}\n          <input\n            id=\"bg-intensity-input\"\n            type=\"range\"\n            min=\"1\"\n            max=\"75\"\n            defaultValue={bgMask.intensity}\n            onChange={handleInput}\n          />\n          {/* Change background color */}\n          <input\n            id=\"bg-color-input\"\n            name=\"Color Picker\"\n            type=\"color\"\n            defaultValue={bgMask.color}\n            onChange={handleInput}\n          />\n        </div>\n      </>\n    );\n  } else {\n    return (\n      <button onClick={handleToggleOpen} id=\"options-button\">\n        Change Background ▼\n      </button>\n    );\n  }\n};\n\nexport default OptionsBG;\n","// React\nimport React, {useState} from 'react'\n// Redux\nimport {useSelector, useDispatch} from 'react-redux'\nimport {setUtilizeInitiative} from '../../redux/actions'\n\nconst OptionsGameplay = () => {\n\n  /*------Redux------*/\n\n  const utilizeInitiative = useSelector(state => state.utilizeInitiative)\n  const dispatch = useDispatch()\n\n  /*------State------*/\n\n  const [isOpen, setIsOpen] = useState(false)\n\n  /*------Utilities------*/\n\n  const handleToggleOpen = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const renderToggleButton = () => (\n      <>\n\n      <br/>\n      <button\n        style={utilizeInitiative ? {border:'solid green 1px', color: 'green'} : {border: 'solid grey 1px', color: 'grey'}}\n        onClick={() => dispatch(setUtilizeInitiative(!utilizeInitiative))}>\n        Use Initiative\n      </button>\n\n      </>\n  )\n\n  /*------Render------*/\n\n  return (\n    <>\n    <button onClick={handleToggleOpen} id=\"options-button\">\n      Gameplay {isOpen ? '▲' : '▼'}\n    </button>\n    {isOpen ? renderToggleButton() : null}\n    </>\n  )\n}\n\nexport default OptionsGameplay\n","// React\nimport React, {useState} from 'react'\n// Redux\nimport {useDispatch, useSelector} from 'react-redux'\nimport {setSocketRoom} from '../../redux/actions'\n\nconst OptionsGameplay = () => {\n\n  /* Redux */\n\n  const socketRoom = useSelector(state => state.socketRoom)\n  const dispatch = useDispatch()\n\n  /* State */\n\n  const [isOpen, setIsOpen] = useState(false)\n  const [roomInput, setRoomInput] = useState('')\n  const [passwordInput, setPasswordInput] = useState('')\n\n  /* Utilities */\n\n  const handleToggleOpen = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleChange = event => {\n    switch (event.target.name) {\n      case 'roomInput':\n        setRoomInput(event.target.value)\n        break;\n      case 'passwordInput':\n        setPasswordInput(event.target.value)\n        break;\n      default:\n    }\n  }\n\n  const handleSubmit = event => {\n    event.preventDefault()\n    if (roomInput.length > 3 && passwordInput.length > 3) {\n      dispatch(setSocketRoom({name: roomInput, password: passwordInput}))\n    }\n    // TODO: set up error messages for validations\n  }\n\n  const renderToggleButton = () => (\n      <>\n\n      <br/>\n      <p style={{fontSize: '0.9em', fontFamily: 'monospace', marginRight: '0.4em'}}>Current Room: {socketRoom.name}</p>\n\n      <form onSubmit={handleSubmit}>\n        <input type='text' name='roomInput'\n          placeholder='room'\n          value={roomInput}\n          onChange={handleChange}\n          style={{textAlign: 'right'}} />\n        <br/>\n        <input type='password' name='passwordInput'\n          placeholder='password'\n          value={passwordInput}\n          onChange={handleChange}\n          style={{textAlign: 'right'}} />\n        <br/>\n\n        <input type='submit' value='Select Room'/>\n      </form>\n\n      </>\n  )\n\n  return (\n    <>\n    <button onClick={handleToggleOpen} id=\"options-button\">\n      Connection {isOpen ? '▲' : '▼'}\n    </button>\n    {isOpen ? renderToggleButton() : null}\n    </>\n  )\n}\n\nexport default OptionsGameplay\n","// React\nimport React, { useState } from \"react\";\n// Components\nimport OptionsBG from \"./options-bg\";\nimport OptionsGameplay from './options-gameplay'\nimport OptionsRooms from './options-rooms'\n// Redux\nimport {useSelector} from 'react-redux'\n// CSS\nimport './style.css'\n\n/*------Component------*/\nconst OptionsContainer = ({socketChangeBG}) => {\n\n  /*------Redux------*/\n\n  const {bg, bgMask} = useSelector(state => state)\n\n  /*------State------*/\n  const [optionsOpen, setOptionsOpen] = useState(false);\n  const [optionsMessage, setOptionsMessage] = useState(\"\");\n\n  /*------Setters------*/\n  const handleToggleOpen = () => {\n    setOptionsOpen(!optionsOpen);\n    setOptionsMessage(\"\");\n    socketChangeBG(bg, bgMask)\n  };\n\n  /*------Utilities------*/\n\n  const renderOptions = () => {\n    if (optionsOpen) {\n      return (\n        <div>\n\n          <div\n            className=\"fillscreen\"\n            onClick={handleToggleOpen}\n            style={{ zIndex: \"-1\" }}\n          />\n\n          <OptionsBG setOptionsMessage={setOptionsMessage} />\n\n          <br/>\n\n          <OptionsGameplay />\n\n          <br/>\n\n          <OptionsRooms />\n\n          {optionsMessage ? <p id=\"options-message\">{optionsMessage}</p> : null}\n\n        </div>\n      );\n    } else {\n      return null;\n    }\n  };\n\n  /*------Render------*/\n\n  return (\n    <div id=\"options-container\">\n      <img\n        src=\"https://www.shareicon.net/data/32x32/2017/01/17/872814_gear_512x512.png\"\n        alt=\"Options\"\n        onClick={handleToggleOpen}\n        id=\"options-toggle-open-button\"\n      />\n      {renderOptions()}\n    </div>\n  );\n};\n\nexport default OptionsContainer;\n","export const defaultBGImage = \"https://img3.goodfon.com/wallpaper/nbig/1/be/art-fantasy-forest-dragon-by.jpg\"\n\nexport const reconnectionDelay = 2000\n\nexport const reconnectionAttempts = 5\n\n// export const endpoint = '10.9.110.165:3050'\nexport const endpoint = 'https://action-chance-backend.herokuapp.com/'\n\nexport const debugLog = message => {\n  if (process.env.NODE_ENV !== 'production') console.log(`%cDebug: ${message}`, 'color: blue')\n}\n","// React\nimport React, {useState, useEffect} from 'react'\n// Redux\nimport {useDispatch, useSelector} from 'react-redux'\nimport {setSocketRoom, clearSocketRoom} from '../redux/actions'\n// Constants\nimport {debugLog} from '../constants'\n\n/* Component */\nconst RoomPrompt = () => {\n\n  /* Redux */\n\n  const dispatch = useDispatch()\n  const socketRoom = useSelector(state => state.socketRoom)\n\n  /* State */\n\n  const [roomInput, setRoomInput] = useState('')\n  const [passwordInput, setPasswordInput] = useState('')\n  const [isLongConnection, setIsLongConnection] = useState(false)\n\n  /* Utilities */\n\n  // Creates a mesage if the connection is taking too long\n  useEffect(() => {\n    let timeout\n    if (socketRoom.name && !isLongConnection) {\n      timeout = setTimeout(() => setIsLongConnection(true), 7500)\n    }\n\n    return () => clearTimeout(timeout)\n  }, [isLongConnection, socketRoom])\n\n  useEffect(() => {\n    return setIsLongConnection(false)\n  }, [socketRoom])\n\n  const handleChange = event => {\n    switch (event.target.name) {\n      case 'roomInput':\n        setRoomInput(event.target.value)\n        break;\n      case 'passwordInput':\n        setPasswordInput(event.target.value)\n        break;\n      default:\n        debugLog('huh?')\n    }\n  }\n\n  const handleCancel = () => {\n    dispatch(clearSocketRoom())\n  }\n\n  const handleSubmit = event => {\n    event.preventDefault()\n    if (roomInput.length > 3 && passwordInput.length > 3) {\n      dispatch(setSocketRoom({name: roomInput, password: passwordInput}))\n    }\n    //TODO: create error messages for improper length\n  }\n\n  const cDot = delay => {\n    return <span className='connection-dot' style={{animationDelay: `${delay}s`}}>.</span>\n  }\n\n  /* Render */\n  return (\n    <div id='room-prompt'>\n      {/* If no room, prompts to join, otherwise renders a connecting message depending on how long it's been connecting */}\n      {!socketRoom.name ?\n        <>\n\n        <p>Join a game</p>\n\n        <form onSubmit={handleSubmit}>\n          <input onChange={handleChange}\n            name='roomInput'\n            type='text' max='15'\n            value={roomInput}\n            placeholder='room' />\n          <br/>\n          <input onChange={handleChange}\n            name='passwordInput'\n            type='password' max='20'\n            value={passwordInput}\n            placeholder='password' />\n          <br/>\n          <input type='submit' value='Submit'/>\n        </form>\n\n        </>\n\n      : !isLongConnection ?\n\n        <p>Connecting{cDot(0)}{cDot(0.3)}{cDot(0.6)}</p>\n\n        : (\n          <>\n            <p>This is taking longer than normal{cDot(0)}{cDot(0.3)}{cDot(0.6)}</p>\n            <button onClick={handleCancel}>Cancel</button>\n          </>\n        )\n      }\n    </div>\n  )\n}\n\nexport default RoomPrompt\n","// React\nimport React, { useEffect } from \"react\";\n// Style\nimport \"./App.css\";\n// Components\nimport ParticipantsContainer from \"./components/participants-container\";\nimport Options from \"./components/options/options-container\";\nimport RoomPrompt from \"./components/room-prompt\"\n// Socket.io\nimport socketIO from 'socket.io-client'\n// Constants\nimport {defaultBGImage, reconnectionDelay, reconnectionAttempts, endpoint, debugLog} from './constants'\n// Redux\nimport {useDispatch, useSelector} from 'react-redux'\nimport * as actions from './redux/actions'\n\n/* Component */\n\nfunction App() {\n\n  // Redux\n  const dispatch = useDispatch()\n  const {bg, bgMask, displayMessage, socket, socketRoom} = useSelector(state => state)\n\n  /* Socket IO */\n\n  // When attempting a reconnect\n  const reconnectAttempt = attempts => {\n      debugLog(`could not connect to: ${endpoint}`)\n      debugLog(`reconnection attempt: ${attempts} out of ${reconnectionAttempts}`)\n      if (attempts >= 5) dispatch(actions.clearSocketRoom())\n  }\n\n  // Adds or removes participants from all users\n  const socketChangeParticipants = newParticipants => {\n    socket.emit('change participants', {data: newParticipants, room: socketRoom})\n  }\n\n  // Sets the active participant\n  const socketChangeActiveParticipant = newActiveParticipant => {\n    socket.emit('change active participant', {data: newActiveParticipant, room: socketRoom})\n  }\n\n  // Sets the background and background mask\n  const socketChangeBG = (newBGImage, newBGMask) => {\n    socket.emit('change background', {data: {image: newBGImage, mask: newBGMask}, room: socketRoom})\n  }\n\n  // Sets the main display message at the top of the screen\n  const socketChangeDisplayMessage = newMessage => {\n    socket.emit('change display message', {data: newMessage, room: socketRoom})\n  }\n\n  const socketChangeInitiativeUse = newInitiativeUse => {\n    socket.emit('change initiative use', {data: newInitiativeUse, room: socketRoom})\n  }\n\n  const socketRequestRoomInfo = socket => {\n    socket.emit('request room info', {room: socketRoom})\n    // socket.emit('change display message', {data: 'A new player has joined...!', room: socketRoom})\n  }\n\n  // Main connection function\n  const connectSocket = () => {\n    debugLog(`connecting to ${endpoint}`)\n\n    const newSocket = socketIO(endpoint, {\n      reconnectionAttempts,\n      reconnectionDelay\n    })\n\n    socketRequestRoomInfo(newSocket)\n\n    newSocket.on('reconnecting', reconnectAttempt)\n    newSocket.on('reconnect', () => debugLog(`reconnected: ${endpoint}`))\n\n    newSocket.on('join room', response => {\n      dispatch(actions.setParticipants(response.participants))\n      dispatch(actions.setBG(response.bg.image))\n      dispatch(actions.setBGMask(response.bg.mask))\n      dispatch(actions.setActiveParticipant(response.activeParticipant))\n      dispatch(actions.setUtilizeInitiative(response.initiative))\n    })\n\n    newSocket.on('change participants', response => {\n      dispatch(actions.setParticipants(response.data))\n    })\n\n    newSocket.on('change active participant', response => {\n      dispatch(actions.setActiveParticipant(response.data))\n    })\n\n    newSocket.on('change background', response => {\n      dispatch(actions.setBG(response.data.image))\n      dispatch(actions.setBGMask(response.data.mask))\n    })\n\n    newSocket.on('change display message', response => {\n      dispatch(actions.setDisplayMessage(response.data))\n      document.title = response.data\n    })\n\n    newSocket.on('change initiative use', response => {\n      dispatch(actions.setUtilizeInitiative(response.data))\n    })\n\n    newSocket.on('invalid password', response => {\n      alert(response)\n      dispatch(actions.setSocketRoom({name: '', password: ''}))\n      newSocket.disconnect()\n    })\n\n    newSocket.on('shutdown', response => {\n      dispatch(actions.setSocket(null))\n      dispatch(actions.setSocketRoom({name: '', password: ''}))\n\n      dispatch(actions.setBG(defaultBGImage))\n      dispatch(actions.setBGMask({ color: \"#7D7D7D\", intensity: 25 }))\n      alert(response)\n    })\n\n    dispatch(actions.setSocket(newSocket))\n\n    // Return socket for useEffect to utilize\n    return newSocket\n  }\n\n  /* Connect Socket */\n\n  // Connects the socket, disconnects the socket if socket gets updated\n  useEffect(() => {\n    let socket\n    if (socketRoom.name) {\n      socket = connectSocket()\n    }\n\n    // Cleanup\n    return () => {\n      if (socket) socket.disconnect()\n    }\n\n  }, [socketRoom])\n\n  useEffect(() => {\n    const activeCard = document.getElementsByClassName('participant-card-active')[0]\n    if (activeCard) activeCard.scrollIntoView({behavior: \"smooth\", block: \"center\"})\n  })\n\n  /* Render */\n\n  return (\n    <div className=\"App\">\n\n      <div\n        id=\"bg-mask\"\n        style={{\n          background: `linear-gradient(${bgMask.color + \"90\"}, ${bgMask.color})`,\n          opacity: `${bgMask.intensity * 0.01}`\n        }}\n        className=\"fillscreen\"\n      />\n\n      <div id=\"bg\" style={{ backgroundImage: `url(${bg})` }} />\n\n      <div id=\"bg-container\" />\n\n      {/* Shows the participants if in a room, otherwise prompts to join a room */}\n\n      {socketRoom.name && socket && socket.connected ? (\n\n        <ParticipantsContainer {...{\n          setParticipants: socketChangeParticipants,\n          setActiveParticipant: socketChangeActiveParticipant,\n          displayMessage,\n          setDisplayMessage: socketChangeDisplayMessage\n        }} />\n\n      ) : (\n\n        <RoomPrompt />\n\n      )}\n\n      {/* Only show options if socket has been established */}\n      { socket && socket.connected ?\n\n        <Options {...{\n        socketChangeBG,\n        setUtilizeInitiative: socketChangeInitiativeUse,\n        }}/>\n\n        : null }\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {combineReducers} from 'redux'\nimport participantsReducer from './participants'\nimport activeParticipantReducer from './active_participant'\nimport bgReducer from './bg'\nimport bgMaskReducer from './bg_mask'\nimport displayMessageReducer from './display_message'\nimport utilizeInitiativeReducer from './utilize_initiative'\nimport socketReducer from './socket'\nimport socketRoomReducer from './socketroom'\n\nexport default combineReducers({\n  participants: participantsReducer,\n  activeParticipant: activeParticipantReducer,\n  bg: bgReducer,\n  bgMask: bgMaskReducer,\n  displayMessage: displayMessageReducer,\n  utilizeInitiative: utilizeInitiativeReducer,\n  socket: socketReducer,\n  socketRoom: socketRoomReducer\n})\n","import { SET_PARTICIPANTS } from './actions'\n\n// participants = []\nexport default function(state = [], action) {\n  switch (action.type) {\n    case SET_PARTICIPANTS:\n      return action.payload\n    default:\n      return state\n  }\n}\n","import { SET_ACTIVE_PARTICIPANT } from './actions'\n\n// activeParticipant = null\nexport default function(state = null, action) {\n  switch (action.type) {\n    case SET_ACTIVE_PARTICIPANT:\n      return action.payload\n    default:\n      return state\n  }\n}\n","import { SET_BG } from './actions'\nimport {defaultBGImage} from '../constants'\n\n// bg = defaultBGImage\nexport default function(state = defaultBGImage, action) {\n  switch (action.type) {\n    case SET_BG:\n      return action.payload\n    default:\n      return state\n  }\n}\n","import { SET_BG_MASK } from './actions'\n\n// bgMask = { color: \"#7D7D7D\", intensity: 25 }\nexport default function(state = { color: \"#7D7D7D\", intensity: 25 }, action) {\n  switch (action.type) {\n    case SET_BG_MASK:\n      return action.payload\n    default:\n      return state\n  }\n}\n","import { SET_DISPLAY_MESSAGE } from './actions'\n\n// displayMessage = |||\nexport default function(state = '|||', action) {\n  switch (action.type) {\n    case SET_DISPLAY_MESSAGE:\n      return action.payload\n    default:\n      return state\n  }\n}\n","import { SET_UTILIZE_INITIATIVE } from './actions'\n\n// utilizeInitiative = 1\nexport default function(state = 1, action) {\n  switch (action.type) {\n    case SET_UTILIZE_INITIATIVE:\n      return action.payload\n    default:\n      return state\n  }\n}\n","import { SET_SOCKET } from './actions'\n\n// socket = null\nexport default function(state = null, action) {\n  switch (action.type) {\n    case SET_SOCKET:\n      return action.payload\n    default:\n      return state\n  }\n}\n","import { SET_SOCKETROOM, SET_SOCKETROOM_NAME, SET_SOCKETROOM_PASSWORD, CLEAR_SOCKETROOM } from './actions'\n\n// socketRoom = {name:'', password:''}\nexport default function(state = {name: '', password: ''}, action) {\n  switch (action.type) {\n    case SET_SOCKETROOM_NAME:\n      return {name: action.payload, password: state.password}\n    case SET_SOCKETROOM_PASSWORD:\n      return {name: state.name, password: action.payload}\n    case SET_SOCKETROOM:\n      return action.payload\n    case CLEAR_SOCKETROOM:\n      return {name: '', password: ''}\n    default:\n      return state\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport reducer from './redux/reducer'\n\nconst store = createStore(reducer)\n\nReactDOM.render(<Provider store={store}> <App /> </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}